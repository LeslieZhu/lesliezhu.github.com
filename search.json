[{"title": "\u5173\u4e8eCStdString", "url": "/2019/12/29/\u5173\u4e8eCStdString\u7684\u65b9\u65b9\u9762\u9762.html", "content": "<div id=\"content\">\n<h1 class=\"title\">\u5173\u4e8eCStdString</h1>\n<div class=\"outline-2\" id=\"outline-container-orgc693fa5\">\n<h2 id=\"orgc693fa5\">CStdString</h2>\n<div class=\"outline-text-2\" id=\"text-orgc693fa5\">\n<p>\n<code>Joe O'Leary CStdString</code> \u5176\u672c\u8eab\u597d\u50cf\u662fVC++/MFC\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u652f\u6301ansi\u3001unicode:\n</p>\n<ul class=\"org-ul\">\n<li>\u4f5c\u8005 <code>Joe O'Leary</code> \u4e3b\u9875\uff08\u5df2\u7ecf\u65e0\u6cd5\u6253\u5f00\uff09:<a href=\"http://www.joeo.net/\">http://www.joeo.net/</a></li>\n<li><code>StdString.h</code> \u8bf4\u660e\u9875\u9762\uff08\u5df2\u7ecf\u65e0\u6cd5\u6253\u5f00\uff09:<a href=\"http://home.earthlink.net/~jmoleary/stdstring.htm\">http://home.earthlink.net/~jmoleary/stdstring.htm</a></li>\n<li>\u4f5c\u80052011\u5199\u7684\u6587\u7ae0 <a href=\"https://www.codeproject.com/Articles/1146/CString-clone-Using-Standard-C\">CString-clone Using Standard C++</a> :</li>\n<li>\u522b\u4eba\u6574\u7406\u7684\u76f8\u5173repo: <a href=\"https://github.com/lunakid/CStdString\">https://github.com/lunakid/CStdString</a></li>\n</ul>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org8150442\">\n<h2 id=\"org8150442\">StdString.h</h2>\n<div class=\"outline-text-2\" id=\"text-org8150442\">\n<p>\n<code>2011-12-05</code> \u7684\u7248\u672c\uff08\u6ca1\u627e\u5230\u66f4\u65b0\u7248\u672c\uff09:\n</p>\n<div class=\"org-src-container\">\n<pre class=\"src src-c++\">//  FILE:  StdString.h\n//  AUTHOR:\tJoe O'Leary (with outside help noted in comments)\n//\n//\t\tIf you find any bugs in this code, please let me know:\n//\n//\t\t\t\tjmoleary@earthlink.net\n//\t\t\t\thttp://www.joeo.net/stdstring.htm (a bit outdated)\n//\n//      The latest version of this code should always be available at the\n//      following link:\n//\n//              http://www.joeo.net/code/StdString.zip (Dec 6, 2003)\n//\n//\n//  REMARKS:\n//\t\tThis header file declares the CStdStr template.  This template derives\n//\t\tthe Standard C++ Library basic_string&lt;&gt; template and add to it the\n//\t\tthe following conveniences:\n//\t\t\t- The full MFC CString set of functions (including implicit cast)\n//\t\t\t- writing to/reading from COM IStream interfaces\n//\t\t\t- Functional objects for use in STL algorithms\n//\n//\t\tFrom this template, we intstantiate two classes:  CStdStringA and\n//\t\tCStdStringW.  The name \"CStdString\" is just a #define of one of these,\n//\t\tbased upone the UNICODE macro setting\n//\n//\t\tThis header also declares our own version of the MFC/ATL UNICODE-MBCS\n//\t\tconversion macros.  Our version looks exactly like the Microsoft's to\n//\t\tfacilitate portability.\n</pre>\n</div>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org896aece\">\n<h2 id=\"org896aece\">\u522b\u4eba\u7684\u8a00\u8bba\u3001\u8bc4\u4ef7</h2>\n<div class=\"outline-text-2\" id=\"text-org896aece\">\n<pre class=\"example\">\n\u4e00\u4e2aVC++\u4e2d\u7684StdString\u7c7b\u6e90\u4ee3\u7801\uff0c\u53ef\u5b8c\u5584\u66ff\u4ee3CString\u5b57\u7b26\u4e32\u7c7b\uff0c\u652f\u6301ansi\u3001unicode\u3002\u5b9e\u9645\u5728\u4e00\u4e9b\u9879\u76ee\u4e2d\u7528\u4e86\u4e00\u6bb5\uff0c\u611f\u89c9\u975e\u5e38\u68d2\uff0c\u63a8\u8350\u7ed9\u670b\u53cb\u4eec\u3002\n</pre>\n<pre class=\"example\">\n\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0cstd\u7684string\u529f\u80fd\u76f8\u5bf9\u4e8eMFC\u7684CString\u6765\u8bf4\uff0c\u5b9e\u5728\u662f\u76f8\u5f62\u89c1\u7ecc\u3002\n\nCStdString\u7c7b\u5b9e\u73b0\u4e86CString\u7684\u529f\u80fd\uff0c\u652f\u6301\u8de8\u5e73\u53f0\u3002\n</pre>\n<p>\n\u5728 <a href=\"https://stackoverflow.com/questions/5437675/mixing-objc-and-c-with-c-template-classes-in-more-than-one-source?r=SearchResults\">mixing-objc-and-c-with-c-template-classes-in-more-than-one-source</a> \u4e0a\u83b7\u53d6\u5230\u8fd9\u4e9b\u4fe1\u606f:\n</p>\n<pre class=\"example\">\nJoe's CStdString is in fact a derived class from std::string.\n\nAnyway, bad thing - good thing: CStdString has no own members. It's a straightforward wrapper for one/two byte instantiations of std::basic_string with the convenience of most features that MFC CString offers and a wide usability. I used it on Linux more than 10 years ago and on Win32 where I couldn't use MFC. Joe's work on it started 1998 with help of ~50 people within 7 years of development. I think they've managed the poorly side effects being in the template.\n</pre>\n</div>\n</div>\n<div class=\"outline-2\" id=\"outline-container-org25a48c8\">\n<h2 id=\"org25a48c8\">CString-clone Using Standard C++</h2>\n<div class=\"outline-text-2\" id=\"text-org25a48c8\">\n<pre class=\"example\">\nAs much as I use and appreciate the Standard C++ Library, I've never liked its string template - basic_string&lt;&gt;. At times, it seems the designers went out of their way to make it difficult to use.\n\nOn the other hand, I've always loved the ease of use of MFC's CString class. It checks for NULL pointers, implicitly converts to const TCHAR*, and has some very handy member functions (Format, Load, etc.) that make string programming a breeze. But of course, I don't want to use MFC anymore. In fact, I don't want to rely on any proprietary library because I want portability.\n</pre>\n<pre class=\"example\">\nGo to Parent(I realize this response is over a year late. I don't appear to be being notified when people reply to this article)\n\n\"Performance\" is a fairly encompassing term. Most of the performance differences will come down to the performance of std::string vs CString. That depends upon your particular implementation of basic_string, over which I have no control\n\nFor the performance of various CString-facade functions (e.g. format), well at this point I am long past comparing those or worrying about it. It is not going to make a difference in 99% of the cases. You would have to be doing some monster-level of string processing for it to matter.\n\nIf that sounds like a bit of a dismissal, I suppose it is. This class is mostly meant to help people transition over from CString to std::string with a minimum of code-rewrite. To help you get off of MFC&gt; The idea is that you can get your code running right away and then start refactoring any important string processing code to use basic_string properly, in the most efficient way you see fit. This class is not meant to be used alongside CString. But if it must, well you can then always use CString instead. This class coexist well with it.\n\n-Joe\n</pre>\n</div>\n</div>\n</div>"}]
